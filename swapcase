#! /bin/bash
#
# swapcase 1.2.1, 2021-09-18, 2023-07-18
#
# Invertiert die Gross- und Kleinschreibung, jeder Kleinbuchstabe wird
# durch den entsprechenden Großbuchstaben ersetzt -- und umgekehrt.
#
# Inverts uppercase and lowercase letters, replacing each lowercase letter
# with its corresponding uppercase letter -- and vice versa.
#
# Bernd Storck, https://www.facebook.com/BStLinux/
#

## Constants: ############################
readonly ORIGINAL_SCRIPT_NAME="swapcase"
readonly VERSION="1.2.1"
readonly CURRENT_SCRIPT_NAME="${0##*/}"  ## Equivalent to: "$(basename "$0")", name of the script file.

## Strings for localization according to system language:
if [ "${LANG:0:2}" = "de" ]; then
  UI_LANGUAGE="Deutsch"
  if [ "$CURRENT_SCRIPT_NAME" != "$ORIGINAL_SCRIPT_NAME" ]; then
    current_name_title="Derzeitiger Dateiname"
    current_file_name_reference=" / ${current_name_title}: $CURRENT_SCRIPT_NAME"
  else
    current_file_name_reference=""
  fi

  CALL_HELP_CAPTION="AUFRUF:"

  HELP_EXAMPLE_CALLS=" $CALL_HELP_CAPTION

   $CURRENT_SCRIPT_NAME \"iRGEND EIN tEXT\""

  HELP_KNOWN_OPTIONS=" ZULÄSSIGE OPTIONEN:

   --help|-h|--hilf  : Diese Hilfe anzeigen
   --version|-V      : Den Namen und die Versionsnummer des Programms anzeigen.
   "
else
  UI_LANGUAGE="English"
  if [ "$CURRENT_SCRIPT_NAME" != "$ORIGINAL_SCRIPT_NAME" ]; then
    current_name_title="Current script name"
    current_file_name_reference=" / ${current_name_title}: $CURRENT_SCRIPT_NAME"
  else
    current_file_name_reference=""
  fi

  CALL_HELP_CAPTION="SAMPLE CALLS:"

  HELP_EXAMPLE_CALLS=" $CALL_HELP_CAPTION

  $CURRENT_SCRIPT_NAME \"aNY TEXT\""

  HELP_KNOWN_OPTIONS=" POSSIBLE OPTIONS:

   --help|-h|--hilf  : Shows this help.
   --version|-V      : Displays name an version number of the program.
   "
fi


## functions ############################

show_help() {
# Displays program purpose and usage help.

printf "\n \e[1;33m%s\e[0m (%s)%s\n\n" "$ORIGINAL_SCRIPT_NAME" "$VERSION" "$current_file_name_reference"

if [ "$UI_LANGUAGE" = "Deutsch" ]; then
 output=" Kehrt die Gross- bzw. Kleinschreibung einer Zeichenfolge um.

 AUFRUF:

   $CURRENT_SCRIPT_NAME \"<Zeichenfolge>\"

$HELP_KNOWN_OPTIONS

$HELP_EXAMPLE_CALLS"

else  # English help:
  output=" Inverts the case of a string, all uppercase to lowercase and
 all lowercase to uppercase.

 CALL:

  $CURRENT_SCRIPT_NAME   \"<string>\"

$HELP_KNOWN_OPTIONS

$HELP_EXAMPLE_CALLS"
fi

printf "%s\n\n" "$output"
}


normalize_option_name () {
# For error tolerance, the script accepts '-option' for '--option',
# regardless of the string that is substituted for 'option', as long as
# it is longer than one character.
#
# In addition, the option name is translated to lowercase.
#
# Overall, this causes '-version' to be translated to '--versions',
# for example.

  if grep -Evq '^[[:alnum:]]' <<< "$1" 2>&1 > /dev/null; then
    # Converts leading '-' to '--':
    sed -E 's:^-{1}([a-z]{2,}):--\1:' <<< "$1" | tr '[:upper:]' '[:lower:]'
  else
    echo "$1"
  fi
}

args=("$@")

main () {
  # Catches calls for self documentation:
  if [ "${#args[@]}" -gt 0 ]; then
    for arg in "${args[@]}"; do
      option=$(normalize_option_name "$arg")
      case "$option" in
          --help|-h|--hilf)
            show_help
            exit 0
            ;;
          -\#)
            echo "$VERSION"
            exit 0
            ;;
          --version|-v)
            printf "%s (Version %s)%s\n" "$ORIGINAL_SCRIPT_NAME" "$VERSION" "$current_file_name_reference"
            exit 0
            ;;
      esac
    done
  fi

  new_string=
  old_string="$*"
  loopEnd="$(( ${#old_string} - 1 ))"
  ( LANG="de_DE.UTF-8"
  for i in $(seq 0 "$loopEnd"); do  ## loops over all single character

      old_char="${old_string:$i:1}"    ## get next single character

      # Identification of character type: distinction between lowercase and uppercase.
      if grep -c '[a-zäöüß]' <<< "$old_char" &> /dev/null; then  ## if a lower case character
          if [ "$old_char" != "ß" ]; then
            new_string+="${old_char^^}"
          else
            new_string+="${old_char/ß/SS}"
          fi
      else                                                      ## if an upper case character
          new_string+="${old_char,,}"
      fi

  done

  echo "$new_string" )
}
  
main "$@"

exit 0
